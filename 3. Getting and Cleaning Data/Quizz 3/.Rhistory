mtcars
summarise(mtcars, mean(disp))
group_by(mtcars, cyl)
summarise(mtcars, mean(disp))
summarise(group_by(mtcars,cyl), mean(disp))
summarise(data_grouped, mean(subject))
summarise(data_grouped, mean(tBodyAcc.mean...X))
View(summarise(data_grouped, mean(tBodyAcc.mean...X)))
data_grouped&tBodyAcc.mean...X
colnames(data_grouped)
data_grouped&tBodyAcc.mean...X
data_grouped[3]
count(data_grouped[3])
count(summarise(data_grouped, mean(tBodyAcc.mean...X)))
data_grouped$subject
data_grouped$tBodyAcc.mean...X
mean(data_grouped$tBodyAcc.mean...X)
data_grouped&tBodyAcc.mean...X
data_grouped&tBodyAcc.mean...X
mean(data_grouped$tBodyAcc.mean...X)
data_grouped$tBodyAcc.mean...X
data_grouped&tBodyAcc.mean...X
data_grouped$tBodyAcc.mean...X
clear()
mean(data_grouped)
mean(data_grouped[[]])
mean(data_grouped[)
mean(data_grouped[])
mean(data_grouped)
summarise(data_grouped, mean)
summarise(data_grouped, mean())
summarise(data_grouped, mean(colnames))
summarise(data_grouped, mean(colnames(data_grouped)))
?summarise_each
summarise_each(data_grouped, mean())
summarise_each(data_grouped, mean
)
summarise_each(data_grouped, funs(mean))
View(summarise_each(data_grouped, funs(mean)))
count(summarise_each(data_grouped, funs(mean)))
ncol(summarise_each(data_grouped, funs(mean)))
?write.table
data_avg <- summarise_each(data_grouped, funs(mean))
write.table(data.avg, file = "data_avg.txt", row.names = FALSE)
write.table(data_avg, file = "data_avg.txt", row.names = FALSE)
read.table("data_avg.txt")
View(read.table("data_avg.txt"))
View(read.table("data_avg.txt", col.names=TRUE))
(read.table("data_avg.txt", col.names=TRUE))
?read.table
View(read.table("data_avg.txt", header=TRUE))
source(run_analysis.R)
source("run_analysis.R")
run_analysis()
#1.Merging the training and the test sets
#1.1. Reading the files
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", sep="")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", sep="")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", sep="")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", sep="")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", sep="")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", sep="")
#1.2. Merging the files
x <- rbind(x_train, x_test)
y <- rbind(y_train, y_test)
subject <- rbind(subject_train, subject_test)
data <- cbind(subject, y, x)
#4.Appropriately labeling the data set with descriptive variable names.
features <- read.table("UCI HAR Dataset/features.txt", sep="")
features_character <- (as.character(features[[2]]))
colnames(data) <- c("subject", "activity", features_character)
data_names <- make.names(colnames(data), unique=TRUE)
colnames(data) <- data_names
#2.Extracting only the measurements on the mean and standard deviation
#Be aware that the first column is "data", the second is "subject", then all the columns with
#"mean" in their name, and then all the columns with "std" in their name
data_selected <- select(data, subject, activity, contains("mean"), contains("std"))
#3.Naming the activities in the data set
activity_labels <- factor(data_selected$activity, levels = c(1,2,3,4,5,6), labels = c("walking", "walking_upstairs", "walking_downstairs", "sitting", "standing", "laying"))
data_selected$activity <- activity_labels
#5.Creating an independent tidy data set with the average of each variable for each activity
#and each subject.
#5.1. Grouping the data by activity and subject
data_grouped <- group_by(data_selected, activity, subject)
#5.2. Extracting the mean for each activity and subject combination (180 rows)
data_avg <- summarise_each(data_grouped, funs(mean))
colnames(data_avg)
write.table(colnames(data_avg), "colnames.txt")
setwd("~/Dropbox/PhD/Coursera - Data Science Specialization/3. Getting and Cleaning Data/Quizz 3")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "/housing.csv")
list.files()
list.files()
ls()
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "./housing.csv")
housing <- read.csv("./housing.csv")
head(hous)
head(housing)
ACR == 3 & AGS == 6
which(ACR == 3 & AGS == 6)
which(housing, ACR == 3 & AGS == 6)
housing(ACR == 3 & AGS == 6)
housing[ACR == 3 & AGS == 6]
housing[ACR == 3 & AGS == 6,]
housing
colnames(housing)
housing[, ACR == 3 & AGS == 6]
library(dplyr)
select(housing, ACR == 3 & AGS == 6)
select(housing, "ACR" == 3 & "AGS" == 6)
select(housing, ACR, AGS)
View(select(housing, ACR, AGS))
filter(housing, ACR == 3 & AGS == 6)
which(filter(housing, ACR == 3 & AGS == 6))
?which
View(filter(housing, ACR == 3 & AGS == 6))
housing[ACR == 3 && AGS == 6]
housing[housing$ACR == 3 & housing$AGS == 6]
housing[housing$ACR == 3 && housing$AGS == 6]
housing$ACR
housing[housing$ACR == 3 && housing$AGS == 6,]
housing[,housing$ACR == 3 && housing$AGS == 6]
housing[housing$ACR == 3 && housing$AGS == 6]
housing[housing$ACR == 3 & housing$AGS == 6]
housing[housing$ACR == 3 | housing$AGS == 6]
housing[housing$ACR == 3 || housing$AGS == 6]
housing[housing$ACR == 3 && housing$AGS == 6]
housing[housing$ACR == 3 && housing$AGS == 6, ]
housing[, housing$ACR == 3 && housing$AGS == 6]
select(housing, ACR, AGS)
housing$ACR==3 & housing$AGS==6
housing$ACR==3 && housing$AGS==6
agricultureLogical <- housing$ACR==3 & housing$AGS==6
which(agricultureLogical)
?download.packages
download.packages("jpeg")
install.packages(jpeg)
install.packages("jpeg")
?jpeg
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./jeff.jpg")
jpeg("./jeff.jpg")
jeff <- jpeg("./jeff.jpg")
jef
jeff
jpeg(filename = "./jeff.jpg")
jpeg(filename = "jeff.jpg")
jpeg(filename = "jeff.jpg")
library(jpeg)
jpeg(filename = "jeff.jpg")
?readJPEG
readJPEG("./jeff.jpg")
readJPEG("/jeff.jpg")
readJPEG("jeff.jpg")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./jeff.jpg", method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./jeff.jpg", method = curl)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./jeff.jpg", method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./jeff.jpg", method = "auto")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./jeff.jpg", method = "wget")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./jeff.jpg", method = "lynx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./jeff.jpg", method = "internal")
?jpeg
?readJPEG
readJPEG("./jeff(1).jpg", native=TRUE)
data <- readJPEG("./jeff(1).jpg", native=TRUE)
str(data)
?quantile
quantile(data, probs=c(0.3, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "./GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv ", "./EDU.csv")
gdp <- read.csv(GDP.csv)
gdp <- read.csv("GDP.csv")
edu <- read.csv("EDU.csv")
library(dplkyr)
library(dplyr)
head(gdp)
colnames(gdp)
edu <- read.csv("EDU.csv", header=TRUE)
head(edu)
colnames(edu)
gdp <- read.csv("GDP.csv", header=TRUE)
head(gdp)
str(gdp)
View(gdp)
View(edu)
?read.csv
gdp <- read.csv("GDP.csv", header=TRUE, skip=3)
View(gdp)
read.csv("GDP.csv", header=TRUE, skip=4)
head(read.csv("GDP.csv", header=TRUE, skip=4))
head(read.csv("GDP.csv", header=TRUE, skip=3, nrows=2:328))
head(read.csv("GDP.csv", header=TRUE, skip=3, nrows=2:327))
head(read.csv("GDP.csv", header=TRUE, skip=3, nrows=c(2:328))
)
head(read.csv("GDP.csv", header=TRUE, skip=3, nrows=c(2:327)))
head(read.csv("GDP.csv", header=TRUE, skip=3, nrows=c(2)))
head(read.csv("GDP.csv", header=TRUE, skip=3, nrows=232))
View(read.csv("GDP.csv", header=TRUE, skip=3, nrows=232))
View(read.csv("GDP.csv", header=TRUE, skip=3, nrows=232, skipNul=TRUE))
View(read.csv("GDP.csv", header=TRUE, skip=3, nrows=232, skipNul=TRUE, blank.lines.skip=TRUE))
gdp2 <- (read.csv("GDP.csv", header=TRUE, skip=3, nrows=232, skipNul=TRUE, blank.lines.skip=TRUE))
View(gdp2)
select(gdp2, X, Ranking, Economy, US.dollars.)
gdp3 <- select(gdp2, X, Ranking, Economy, US.dollars.)
View(gdp3)
?filter
?dplyr
browseVignettes(package = "dplyr")
slice(gdp3, 2:191)
gdp4 <- slice(gdp3, 2:191)
View(gdp4)
View(edu)
View(gdp4)
View(gdp3)
gdp4 <- slice(gdp3, 2:232)
View(gdp4)
slice(gdp4, 1:190 & 192:215 & 217 & 219:231)
slice(gdp4, 1:190 && 192:215 && 217 && 219:231)
?slice
?skip
filter(gdp4, )
?is.na
filter(gdp4, is.na)
filter(gdp4, is.na())
?distinct
distinct(gdp4)
colnames(edu)
class(edu$Income.Group)
factors(edu$Income.Group)
levels(edu$Income.Group)
?match
match(edu, gdp4)
match(edu$CountryCode, gdp4$X)
edu$Income.Group %in% gdp4$X
levels(edu$Income.Group)
str(edu)
edu0 <- edu$CountryCode
edu0
gdp4 <- edu0
gdp4
gdp4 <- slice(gdp3, 2:232)
View(gdp4)
gdp5<-slice(gdp4, 1:190)
View(gdp5)
View(gdp4)
!(1:190 %in% rank)
!(1:190 %in% gdp5)
!(1:190 %in% gdp2)
!(1:190 %in% gdp5$X)
!(1:190 %in% gdp5$Ranking)
duplicated(rank)
duplicated(gdp4$Ranking)
edu0 %in% gdp4$X
sum(edu0 %in% gdp4$X)
View(edu0)
sum(edu0 %in% gdp$X)
sum(edu0 %in% gdp2$X)
sum(edu0 %in% gdp3$X)
sum(edu0 %in% gdp4$X)
View(edu2)
View(gdp2)
?match
View(edu0)
View(edu)
sum(edu$CountryCode %in% gdp4$X)
sum(edu$CountryCode %in% gdp5$X)
View(gdp5)
?arrange
arrange(gdp5, desc(US.dollars.))
gdp6 <- arrange(gdp5, desc(US.dollars.))
View(gdp6)
class(gdp5$US.dollars.)
as.integer(gdp5$US.dollars.)
?read.csv
head(read.csv("GDP.csv", header=TRUE, skip=3, nrows=2:328, dec=","))
data <- (read.csv("GDP.csv", header=TRUE, skip=3, nrows=2:328, dec=","))
data <- (read.csv("GDP.csv", header=TRUE, skip=3, dec=","))
View(data)
slice(data, 2:191)
data <- slice(data, 2:191)
View(data)
sum(edu$CountryCode %in% data$X)
class(data$US.dollars.)
(data$US.dollars.)
as.integer(data$US.dollars.)
as.numeric(data$US.dollars.)
data[1,5]
class(data[1,5])
as.factor(data[1,5])
as.numeric(data[1,5])
as.numeric(as.character(data[1,5]))
as.character(data$US.dollars.)
data_ch <- as.character(data$US.dollars.)
as.numeric(data_ch)
?as.numeric
levels(data$US.dollars.)
as.numeric(levels(data$US.dollars.))
?sub
sub(",", ".", data$US.dollars.)
mutate(data, sub(",", ".", data$US.dollars.))
View(data)
mutate(data, USD=sub(",", ".", data$US.dollars.))
View(data)
data <- mutate(data, USD=sub(",", ".", data$US.dollars.))
View(data)
View(data)
as.numeric(data$USD)
mutate(data, USD=sub(",", ".", data$USD)
)
data <- mutate(data, USD=sub(",", ".", data$USD))
View(data)
as.numeric(data$USD)
data$USD
as.character(data$USD)
as.numeric(as.character(data$USD))
mutate(data, USD2 = as.numeric(USD))
View(data)
data <- mutate(data, USD2 = as.numeric(USD))
View(data)
arrange(data, desc(USD2))
View(edu)
data$USD$1
data$USD[1]
as.numeric(data$USD[1])
class(data$USD[1])
as.integer(data$USD[1])
?read.csv
head(read.csv("GDP.csv", header=TRUE, skip=3, stringsAsFactors=TRUE)
)
head <- head(read.csv("GDP.csv", header=TRUE, skip=3, stringsAsFactors=TRUE))
class(head$US.dollars.)
levels(head$US.dollars.)
head <- head(read.csv("GDP.csv", header=TRUE, skip=3, stringsAsFactors=TRUE, dec=","))
class(head$US.dollars.)
levels(head$US.dollars.)
head <- head(read.csv("GDP.csv", header=TRUE, skip=3, stringsAsFactors=TRUE, dec=","), numerals="warn.loss")
class(head$US.dollars.)
levels(head$US.dollars.)
head <- head(read.csv("GDP.csv", header=TRUE, skip=3, stringsAsFactors=FALSE, dec=","))
class(head$US.dollars.)
View(ehad)
View(head)
head[2,4]
head[2,5]
class(head[2,5])
as.numeric(head[2,5])
as.integer(head[2,5])
data <- (read.csv("GDP.csv", header=TRUE, skip=3, stringsAsFactors=FALSE, dec=","))
View(data)
slice(data, 2:191)
data<- slice(data, 2:191)
View(data)
data<-select(data, X:US.dollars.)
View(data)
as.numeric(data$US.dollars.)
?as.numeric
as.numeric(data$US.dollars., dec=",")
as.numeric(data$US.dollars., dec=".")
as.numeric(data$US.dollars., dec=",")
mutate(data, USD = sub(",", ".", US.dollars.)
)
data <- mutate(data, USD = sub(",", ".", US.dollars.))
View(data)
data <- mutate(data, USD = sub(",", ".", USD))
View(data)
as.numeric(data$USD)
arrange(data, desc(USD)
)
arrange(data, USD)
prova <- slice(data, 16:190)
prova
arrange(prova, USD)
?arrange
?sort
sort(prova$USD)
class(data$USD)
data <- mutate(data, USD2 = as.numeric(USD))
arrange(data,USD2)
arrange(data,desc(USD2))
?merge
merge(data, edu)
View(merge(data, edu))
View(merge(data, edu, by = X))
View(merge(data, edu, by = data$X))
View(merge(data, edu, by = data$X))
View(merge(data, edu, by = intersect(data$X, edu))
)
View(edu)
View(merge(data, edu, by = intersect(data$X, edu$CountryCode)))
?merge
View(edu)
merge(data, edu, by.x=X, by.y=CountryCode)
merge(data, edu, by.x=dat$X, by.y=CountryCode)
merge(data, edu, by.x=data$X, by.y=edu$CountryCode)
merge(data, edu, by.x="X", by.y="CountryCode")
View(merge(data, edu, by.x="X", by.y="CountryCode"))
A <- (merge(data, edu, by.x="X", by.y="CountryCode"))
str(A)
arrange(A, Ranking)
arrange(A, desc(Ranking)
)
arrange(A, desc(USD2))
View(arrange(A, desc(USD2)))
View(arrange(A, desc(Income.Group)))
View(arrange(A, desc(Ranking)))
B <- (merge(gdp4, edu, by.x="X", by.y="CountryCode"))
View(B)
View(arrange(B, desc(Ranking)))
?match
edu4$X %in% edu$CountryCode
gdp4$X %in% edu$CountryCode
count(gdp4$X %in% edu$CountryCode)
sum(gdp4$X %in% edu$CountryCode)
n(gdp4$X %in% edu$CountryCode)
C<- select(B, X, Ranking, US.dollars., Income.Group)
View(C)
D <- ?group_by
?group_by
D <- group_by(C, Income.Group)
View(D)
D
levels(D$Income.Group)
mutate(D, mean(US.dollars.))
D <- mutate(D, USD_mean = mean(US.dollars.))
View(D)
D <- mutate(D, Ranking_mean = mean(Ranking))
View(D)
D <- arrange(D, desc(Ranking))
View(D)
C<- select(B, X, Ranking, US.dollars., Income.Group)
arrange(C, Ranking)
C <- arrange(C, Ranking)
D <- group_by(C, Income.Group)
D <- mutate(D, USD_mean = mean(US.dollars.))
D <- mutate(D, Ranking_mean = mean(Ranking))
View(D)
C
C <- slice(C, 1:189)
C
D <- group_by(C, Income.Group)
D <- mutate(D, Ranking_mean = mean(Ranking))
View(D)
?quantile
?cut
cut(D$Ranking, 5)
E <- mutate(D, Ranking_group5 = cut(D$Ranking, 5))
E <- mutate(D, Ranking_group5 = cut(D$Ranking, 5))
mutate(D, Ranking_group5 = cut(D$Ranking, 5))
cut(D$Ranking, 5)
mutate(D, Ranking_group5 = cut(D$Ranking, 5))
count(cut(D$Ranking, 5))
n(cut(D$Ranking, 5))
count(cut(D, 5))
as.talbe(cut(D$Ranking, 5))
as.table(cut(D$Ranking, 5))
as.data.frame(cut(D$Ranking, 5))
E <- mutate(D, Ranking_group = as.data.frame(cut(D$Ranking, 5)))
View(E)
E <- mutate(D, Ranking_group = (cut(D$Ranking, 5)))
E <- mutate(D, Ranking_group = as.integer(cut(D$Ranking, 5)))
E <- mutate(D, Ranking_group = as.vector(cut(D$Ranking, 5)))
as.vector(cut(D$Ranking, 5))
E <- D
View(E)
E[,2]
E[,(cut(D$Ranking, 5))]
(cut(D$Ranking, 5))
View(e)
View(E)
?quantile
(quantile(D$Ranking, probs=seq(0, 1/4, 2/4, 3/4, 4/4)))
(quantile(D$Ranking))
E$Ranking_groups = cut(E$Ranking, breaks=quantile(E$Ranking))
View(E)
E$Ranking_groups = cut(E$Ranking, breaks=quantile(E$Ranking, na.rm=TRUE))
View(E)
E$Ranking_groups = cut(E$Ranking, breaks=quantile(E$Ranking, type=8))
View(E)
E$Ranking_groups = cut(E$Ranking, breaks=quantile(E$Ranking, type=1))
View(E)
E$Ranking_groups = cut(E$Ranking, breaks=quantile(E$Ranking))
View(E)
cut(E$Ranking, breaks=quantile(E$Ranking)
)
cut(E$Ranking, breaks=5)
library(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
cut2(E$Ranking, g=5)
table(cut2(E$Ranking, g=5))
E <- mutate(D, Ranking_groups = cut2(Ranking, g=5))
View(E)
View(D)
cut2(Ranking, g=5)
cut2(D$Ranking, g=5)
E <- mutate(D, Ranking_groups = cut2(Ranking, g=5))
View(E)
levels(E$Ranking_groups)
cut2(Ranking, g=5)
cut2(D$Ranking, g=5)
E$Ranking_Groups <- cut2(D$Ranking, g=5)
View(E)
table(E&Ranking_groups)
table(E$Ranking_groups)
table(E$Ranking_Groups)
?table
table(E$Ranking_Groups, E$Income.Group)
View(table(E$Ranking_Groups, E$Income.Group))
View(table(E$Ranking_groups, E$Income.Group))
View(table(E$Income.Group, E$Ranking_Groups))
View(table(E$Ranking_groups, E$Income.Group))
