install.packages(c("foreign", "manipulate", "mgcv"))
?package
?packages
?install.packages
twirl
twirl()
installed.packages
swirl()
?library
library("swirl")
swirl()
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
vector
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
!5==7
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
ints(20)
sample(20)
?sample
sample(10, 20, replace= TRUE)
sample(30, 10, replace= TRUE)
which(ints>7)
any(ints<0)
all(ints>0)
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
as.list(flags)
?lapply
cls_list <- lapply(flags, class)
cls_:
cls_list
cls_list
class(cls_list)
length(cls_list)
dim(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
info()
play()
sapply(flag_colors, mean*100)
sapply(flag_colors, (mean*100))
sapply(flag_colors, (mean-5))
nxt()
flag_shapes[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
play()
str(flags)
summary(flags)
nxt()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(falgs$population, flags&red, summary)
tapply(falgs$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
count(flips)
sum(flips)
?rbinom
rbinom(1,100,0.7)
flips2<-rbinom(100,1,0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
d1
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
?strptime
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
str(cars)
plot(cars)
?plot
plot(cars, x=speed, y=dist)
plot(cars, x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist)
?plot
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
?plot
plot(cars, sub="My Plot Subtitle")
?par
plot(cars, col=2)
plot(cars, xlim=c(10,15))
?points
plot(cars, pch=2)
mtcars()
mtcars
data(mtcars)
?boxplot
boxplot(data=mtcars, mpg~cyl)
boxplot(data=mtcars, formula=mpg~cyl)
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
swirl()
install_from_swirl("Mathematical Biostatistics Boot Camp")
swirl()
mtcars
allMPG <- mtcars$mpg
allPMG
allMPG
mean(allMPG)
sampMeanMPG <- mean(allMPG)
sampVarMPG <- var(allMPG)
n <- length(allMPG)
tStat <- (sampMeanMPG - 12.0) / sqrt(sampVarMPG/n)
myDF <- n-1
tStat
myDF
pVal1 <- pt(tStat, df=myDF, lower.tail=FALSE)
pVal <- pVal1*2
pval
pVal
t.test(allMPG, mu=12.0, alternative="two.sided")
info()
clear()
ls()
class(ls())
character(0)
bye
quit
exit
bye()
quit
exit
exit()
quit()
# modifying parent scope variable
new_counter <- function() {
i <- 0  # this is the variable being modified
function() {
i <<- i + 1  # modifies parent scope variable
i  # prints parent scope variable
}
}
counter_one <- new_counter()
counter_two <- new_counter()
counter_one()
counter_one()
counter_one()
counter_two()
counter_two()
counter_one
}
## Put comments here that give an overall description of what your
## functions do
#The first function takes a square (make sure it's square!) matrix and caches its inverse.
#The second one checks if there's the solution is already in the cache; if not
#
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
## Put comments here that give an overall description of what your
## functions do
#The first function takes a square (make sure it's square!) matrix and caches its inverse.
#The second one solves the square matrix only if there's no solution already cached.
## Write a short comment describing this function
#The first function takes a square (make sure it's square!) matrix and caches its inverse.
#It "hides" it in the "inv". The output of makeCacheMatrix is a named list of functions.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
#The cacheSolve checks if the solution is already in the cache; if so, we return
#a message "getting cached data" and the value of "inv" ("inv" it's the inverse of
#our original matrix). If the solution is not in the cache, then we get the matrix
#with x$get(), we solve it and print it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
print(inv)
}
a <- matrix(c(0.25, 0, 0, 0.25 ), 2,2)
a
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
b<-makeCacheMatrix(a)
b
a
cacheSolve(b)
cacheSolve(b)
?knittr
library(knittr)
install.packages("knitr")
?stitch
library(knitr)
rmarkdown
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
?rmarkdown
??rmarkdown
?markdown
library(rmarkdown)
?rmarkdown
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "Formula", "Hmisc", "jsonlite", "KernSmooth", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "plyr", "pwr", "Rcpp", "RCurl", "RMySQL", "rpart", "spatial", "stringr", "survival"))
?knitr
??knitr
library(knitr)
?knitr
setwd("~/Dropbox/PhD/Formació/Coursera - Data Science Specialization/4. Exploratory Data Analysis/Course Project 1")
ls()
list.files
list.files()
path()
knit("~/Dropbox/PhD/Formació/Coursera - Data Science Specialization/4. Exploratory Data Analysis/Course Project 1/plot4.R")
head("plot4.txt")
head(plot4.txt)
read("./plot4.txt")
fread("./plot4.txt")
read.table("./plot4.txt")
read.csv("./plot4.txt")
library(rmarkdown)
?rmarkdown
render("~/Dropbox/PhD/Formació/Coursera - Data Science Specialization/4. Exploratory Data Analysis/Course Project 1/plot4.R")
